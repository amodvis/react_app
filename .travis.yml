if: branch =~ ^master$|^development$|^release|^uat
language: python
group: stable
dist: trusty
os: linux
sudo: required
services:
- docker
cache: pip

before_install: |-
    set -e
    if [ "master" == "${TRAVIS_BRANCH}" ]; then
      for env_value in $(compgen -v |grep '.*_PRODUCTION$'); do
        eval export ${env_value%_PRODUCTION}="${!env_value}"
      done
      export ENVIRONMENT=production
    elif [[ "${TRAVIS_BRANCH}" == release*  ]]; then
      for env_value in $(compgen -v |grep '.*_STAGING$'); do
        eval export ${env_value%_STAGING}="${!env_value}"
      done
      export ENVIRONMENT=staging
    elif [[ "${TRAVIS_BRANCH}" == uat*  ]]; then
      for env_value in $(compgen -v |grep '.*_UAT$'); do
        eval export ${env_value%_UAT}="${!env_value}"
      done
      export ENVIRONMENT=uat
    else
      for env_value in $(compgen -v |grep '.*_DEVELOPMENT$'); do
        eval export ${env_value%_DEVELOPMENT}="${!env_value}"
      done
      export ENVIRONMENT=development
    fi

install:
    - echo "skip test"

script:
    - echo "skip test"

before_deploy: |-
    set -e

    # install awscli for ecr upload
    pip install awscli --upgrade

    #tag_build_num="v${TRAVIS_BUILD_NUMBER}-build"
    tag_build_num="0.0.${TRAVIS_BUILD_NUMBER}"
    export IMAGE="${AWS_REGISTRY_ID}.dkr.ecr.${AWS_REGION}.amazonaws.com/$AWS_ECR_NAME:$tag_build_num"
    export IMAGE_LATEST="${AWS_REGISTRY_ID}.dkr.ecr.${AWS_REGION}.amazonaws.com/$AWS_ECR_NAME:latest"
    export ECR_LOGIN="aws ecr get-login --registry-ids $AWS_REGISTRY_ID --region $AWS_REGION --no-include-email"

    # cp .env.${ENVIRONMENT} .env

    # build test image to run test

    # build the final image
    docker build -t "$IMAGE" -t $IMAGE_LATEST \
      --build-arg BUILD_ENV=$ENVIRONMENT \
      --build-arg NPM_TOKEN=$NPM_TOKEN \
      --build-arg TRAVIS_BRANCH=$TRAVIS_BRANCH \
      --build-arg TRAVIS_BUILD_NUMBER=$TRAVIS_BUILD_NUMBER \
      --build-arg TRAVIS_COMMIT=$TRAVIS_COMMIT \
      --build-arg TRAVIS_TIMESTAMP="$(date)" \
      .

    # cp static for s3
    docker run --rm \
      -v $PWD/s3_upload:/s3_upload \
      --entrypoint "" \
      ${IMAGE} \
      sh -c "cp -R /srv/* /s3_upload/"

deploy:
- provider: script
  script:  >-
      $(AWS_ACCESS_KEY_ID=${AWS_ECR_ACCESS_KEY_ID} AWS_SECRET_ACCESS_KEY=${AWS_ECR_SECRET_ACCESS_KEY} ${ECR_LOGIN})
      && docker push ${IMAGE}
      && docker push ${IMAGE_LATEST}
  skip_cleanup: true
  on:
    all_branches: true

# upload static to s3
- provider: s3
  access_key_id: $AWS_S3_ACCESS_KEY_ID
  secret_access_key: $AWS_S3_SECRET_ACCESS_KEY
  bucket: $AWS_S3_BUCKET
  region: $AWS_REGION
  local_dir: s3_upload
  skip_cleanup: true
  on:
    all_branches: true
